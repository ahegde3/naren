/* * Copyright (C) 2011 The Android Open Source Project * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.samsung.android.emailcommon.utility;import com.samsung.android.emailcommon.internet.MimeHeader;import com.samsung.android.emailcommon.internet.MimeUtility;import com.samsung.android.emailcommon.mail.MessagingException;import com.samsung.android.emailcommon.mail.Part;import com.samsung.android.emailcommon.mail.Snippet;import com.samsung.android.emailcommon.provider.EmailContent;import com.samsung.android.emailcommon.provider.EmailContentUtils;import android.text.TextUtils;import java.util.ArrayList;public class ConversionUtilities {    /**     * Values for HEADER_ANDROID_BODY_QUOTED_PART to tag body parts     */    public static final String BODY_QUOTED_PART_REPLY = "quoted-reply";    public static final String BODY_QUOTED_PART_FORWARD = "quoted-forward";    public static final String BODY_QUOTED_PART_INTRO = "quoted-intro";    /**     * Helper function to append text to a StringBuffer, creating it if     * necessary. Optimization: The majority of the time we are *not* appending     * - we should have a path that deals with single strings.     */    private static StringBuffer appendTextPart(StringBuffer sb, String newText) {        if (newText == null) {            return sb;        } else if (sb == null) {            sb = new StringBuffer(newText);        } else {            if (sb.length() > 0) {                sb.append('\n');            }            sb.append(newText);        }        return sb;    }    private static StringBuffer appendHtmlPart(StringBuffer sb, String newText) {        if (newText == null) {            return sb;        } else if (sb == null) {            sb = new StringBuffer(newText);        } else {            sb.append(newText);        }        return sb;    }            /**MNO_Lab Start: Karthik P     * Copy body text (plain and/or HTML) from MimeMessage to provider Message     * Call this method only from Exchange     * Message Body max size is restricted to 400KB for Exchange.     * As the Message body needs to be updated in DB residing in Email app.     * Beyond this value, we will encounter Binder Transaction failure.     */    public static boolean updateBodyFields(EmailContent.Body body,            final EmailContent.Message localMessage, ArrayList<Part> viewables) throws MessagingException {        body.mMessageKey = localMessage.mId;        StringBuffer sbHtml = null;        StringBuffer sbText = null;        StringBuffer sbHtmlReply = null;        StringBuffer sbTextReply = null;        StringBuffer sbIntroText = null;        for (Part viewable : viewables) {            String text = null;            String[] replyTags = viewable.getHeader(MimeHeader.HEADER_ANDROID_BODY_QUOTED_PART);            String replyTag = null;            if (replyTags != null && replyTags.length > 0) {                replyTag = replyTags[0];            }            // Deploy text as marked by the various tags            boolean isHtml = "text/html".equalsIgnoreCase(viewable.getMimeType());            try {                text = MimeUtility.getTextFromPart(viewable);            } catch (Exception e) {                EmailLog.dumpException("updateBodyFields", e);            }            if (replyTag != null) {                boolean isQuotedReply = BODY_QUOTED_PART_REPLY.equalsIgnoreCase(replyTag);                boolean isQuotedForward = BODY_QUOTED_PART_FORWARD.equalsIgnoreCase(replyTag);                boolean isQuotedIntro = BODY_QUOTED_PART_INTRO.equalsIgnoreCase(replyTag);                if (isQuotedReply || isQuotedForward) {                    if (isHtml) {                        sbHtmlReply = appendHtmlPart(sbHtmlReply, text);                    } else {                        sbTextReply = appendTextPart(sbTextReply, text);                    }                    // Set message flags as well                    localMessage.mFlags &= ~EmailContent.Message.FLAG_TYPE_MASK;                    localMessage.mFlags |= isQuotedReply ? EmailContent.Message.FLAG_TYPE_REPLY                            : EmailContent.Message.FLAG_TYPE_FORWARD;                    continue;                }                if (isQuotedIntro) {                    sbIntroText = appendTextPart(sbIntroText, text);                    continue;                }            }            // Most of the time, just process regular body parts            if (isHtml) {                sbHtml = appendHtmlPart(sbHtml, text);            } else {                sbText = appendTextPart(sbText, text);            }        }        int availableReplyIntroLength = EmailContent.Body.MESSAGE_BODY_MAX_SIZE;        if (!TextUtils.isEmpty(sbHtml)) {            final String text = sbHtml.toString();            body.mHtmlContent = text;            availableReplyIntroLength -= body.mHtmlContent.length();            if (!EmailContentUtils.isFullMessageBodyLoadDisabled() && body.mHtmlContent.length() > EmailContent.Body.MESSAGE_BODY_MAX_SIZE) {                body.mFileSaveFlags |= EmailContent.Body.FLAGS_HTML_CONTENT_FILE;            }          //  if (localMessage.mSnippet == null || TextUtils.isEmpty(localMessage.mSnippet)) {            	String textForSnippet = text.replaceAll("</DIV>|</Div>|</div>", " </DIV>");                localMessage.mSnippet = Snippet.fromHtmlText(textForSnippet);          //  }        }                // Use text part if HTML is empty only        if (TextUtils.isEmpty(sbHtml) && !TextUtils.isEmpty(sbText)) {            String text = sbText.toString();            body.mTextContent = text;            availableReplyIntroLength -= body.mTextContent.length();             if (!EmailContentUtils.isFullMessageBodyLoadDisabled() && body.mTextContent.length() > EmailContent.Body.MESSAGE_BODY_MAX_SIZE) {                body.mFileSaveFlags |= EmailContent.Body.FLAGS_TEXT_CONTENT_FILE;            }          //  if (localMessage.mSnippet == null || TextUtils.isEmpty(localMessage.mSnippet) || localMessage.mSnippet.equals("&")) {                localMessage.mSnippet = Snippet.fromPlainText(text);          //  }        }        if (localMessage.mSnippet == null) {            localMessage.mSnippet = "";        }                EmailLog.d("updateBodyFields", "availableReplyLength = " + availableReplyIntroLength);                if (sbHtmlReply != null && sbHtmlReply.length() != 0) {            body.mHtmlReply = sbHtmlReply.toString();            if (!EmailContentUtils.isFullMessageBodyLoadDisabled() && body.mHtmlReply.length() > availableReplyIntroLength) {                body.mFileSaveFlags |= EmailContent.Body.FLAGS_HTML_REPLY_FILE;            }            if (availableReplyIntroLength > 0) availableReplyIntroLength -= body.mHtmlReply.length();         }        if (availableReplyIntroLength > 0 && sbTextReply != null && sbTextReply.length() != 0) {            body.mTextReply = sbTextReply.toString();            if (!EmailContentUtils.isFullMessageBodyLoadDisabled() && body.mTextReply.length() > availableReplyIntroLength) {                body.mFileSaveFlags |= EmailContent.Body.FLAGS_TEXT_REPLY_FILE;            }            if (availableReplyIntroLength > 0) availableReplyIntroLength -= body.mTextReply.length();         }        if (availableReplyIntroLength > 0 && sbIntroText != null && sbIntroText.length() != 0) {            body.mIntroText = sbIntroText.toString();            if (!EmailContentUtils.isFullMessageBodyLoadDisabled() && body.mIntroText.length() > availableReplyIntroLength) {                body.mFileSaveFlags |= EmailContent.Body.FLAGS_INTRO_FILE;            }        }        return true;    }    // MNO_Lab End}