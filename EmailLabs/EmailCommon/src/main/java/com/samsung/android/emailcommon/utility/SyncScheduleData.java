//change@wtl.jpshu SyncSchedulepackage com.samsung.android.emailcommon.utility;import com.samsung.android.emailcommon.provider.AccountValues;import com.samsung.android.emailcommon.variant.CommonDefs;import android.content.Context;import android.os.Parcel;import android.os.Parcelable;public class SyncScheduleData implements Parcelable {    private static final String TAG = "SyncScheduleData";    private int mStartMinute;    private int mEndMinute;    private int mPeakDays;    private int mPeakSchedule;    private int mOffPeakSchedule;    private int mRoamingSchedule;        private boolean mIsPeakScheduleOn;    public SyncScheduleData(int peakStartMinute, int peakEndMinute, int peakDays, int peakSchedule,            int offPeakSchedule, int roamingSchedule) {        mStartMinute = peakStartMinute;        mEndMinute = peakEndMinute;        mPeakDays = peakDays;        mPeakSchedule = peakSchedule;        mOffPeakSchedule = offPeakSchedule;        mRoamingSchedule = roamingSchedule;        mIsPeakScheduleOn = true;    }    public SyncScheduleData(int peakStartMinute, int peakEndMinute, int peakDays, int peakSchedule,            int offPeakSchedule, int roamingSchedule, boolean isPeakScheduleOn) {        mStartMinute = peakStartMinute;        mEndMinute = peakEndMinute;        mPeakDays = peakDays;        mPeakSchedule = peakSchedule;        mOffPeakSchedule = offPeakSchedule;        mRoamingSchedule = roamingSchedule;        mIsPeakScheduleOn = isPeakScheduleOn;    }        public int getStartMinute() {        return mStartMinute;    }    public void setStartMinute(int startMinute) {        this.mStartMinute = startMinute;    }    public int getEndMinute() {        return mEndMinute;    }    public void setEndMinute(int endMinute) {        this.mEndMinute = endMinute;    }    public int getPeakDay() {        return mPeakDays;    }    public void setPeakDay(int peakDay) {        this.mPeakDays = peakDay;    }    public int getPeakSchedule() {        return mPeakSchedule;    }    public void setPeakSchedule(int peakSchedule) {        this.mPeakSchedule = peakSchedule;    }    public int getOffPeakSchedule() {        return mOffPeakSchedule;    }    public void setOffPeakSchedule(int offPeakSchedule) {        this.mOffPeakSchedule = offPeakSchedule;    }    public int getRoamingSchedule() {        return mRoamingSchedule;    }    public void setRoamingSchedule(int roamingSchedule) {        this.mRoamingSchedule = roamingSchedule;    }    public boolean getIsPeakScheduleOn(){        return mIsPeakScheduleOn;    }        public void setIsPeakScheduleOn(boolean isPeakScheduleOn){        this.mIsPeakScheduleOn = isPeakScheduleOn;    }        public int describeContents() {        return 0;    }    @Override    public void writeToParcel(Parcel dest, int flags) {        dest.writeInt(mStartMinute);        dest.writeInt(mEndMinute);        dest.writeInt(mPeakDays);        dest.writeInt(mPeakSchedule);        dest.writeInt(mOffPeakSchedule);        dest.writeInt(mRoamingSchedule);        dest.writeByte(mIsPeakScheduleOn ? (byte) 1 : (byte) 0);    }    public SyncScheduleData(Parcel in) {        mStartMinute = in.readInt();        mEndMinute = in.readInt();        mPeakDays = in.readInt();        mPeakSchedule = in.readInt();        mOffPeakSchedule = in.readInt();        mRoamingSchedule = in.readInt();        mIsPeakScheduleOn = in.readByte() == 1;    }    public static final Parcelable.Creator<SyncScheduleData> CREATOR = new Parcelable.Creator<SyncScheduleData>() {        public SyncScheduleData createFromParcel(Parcel in) {            return new SyncScheduleData(in);        }        public SyncScheduleData[] newArray(int size) {            return new SyncScheduleData[size];        }    };    public boolean isManualScheduledNow(Context context) {        SyncScheduleData syncSchedule = this;        EmailLog.d(TAG, "isManualScheduledNow | syncSchedule - " + syncSchedule);        boolean isPeak = SyncScheduler.getIsPeakAndNextAlarm(syncSchedule).first;        boolean ret = false;        // get roaming information        boolean isRoaming = Utility.isRoaming(context);                if (CommonDefs.ALWAYS_ROAMING)         	isRoaming = true;        if (isRoaming) {            int roamingSchedule = syncSchedule.getRoamingSchedule();            if (roamingSchedule == AccountValues.SyncTime.CHECK_ROAMING_MANUAL) {				EmailLog.d(TAG, "isManualScheduledNow - Roaming and " + " isPeak - " + 									isPeak + " and Manaul is set");				return true;			}			// Other option to follow the current schedule!		}		if ((isPeak && syncSchedule.getPeakSchedule() == AccountValues.SyncTime.CHECK_INTERVAL_NEVER) ||				(!isPeak && syncSchedule.getOffPeakSchedule() == AccountValues.SyncTime.CHECK_INTERVAL_NEVER)) {			ret = true;		}		EmailLog.d(TAG, "isManualScheduledNow isPeak - " + isPeak + " isManual - "+ ret);		return ret;	}	// SVL - start a.somani		public boolean isPushScheduledNow(Context context) {        SyncScheduleData syncSchedule = this;        EmailLog.i(TAG, "isPushScheduledNow | syncSchedule - " + syncSchedule);        boolean isPeak = SyncScheduler.getIsPeakAndNextAlarm(syncSchedule).first;        boolean ret = true;        // get roaming information        boolean isRoaming = Utility.isRoaming(context);                if (CommonDefs.ALWAYS_ROAMING)         	isRoaming = true;                if (isRoaming) {            int roamingSchedule = syncSchedule.getRoamingSchedule();            if (roamingSchedule == AccountValues.SyncTime.CHECK_ROAMING_MANUAL) {                EmailLog.d(TAG, "isPushScheduledNow - Roaming and "                        + " this time - " + isPeak);                return false;            }            // Other option to follow the current schedule!        }        if ((isPeak && syncSchedule.getPeakSchedule() != AccountValues.SyncTime.CHECK_INTERVAL_PUSH)                || (!isPeak && syncSchedule.getOffPeakSchedule() !=                		AccountValues.SyncTime.CHECK_INTERVAL_PUSH)) {            ret = false;        }        EmailLog.d(TAG, "isPushScheduledNow and this time isPeak - " + isPeak                + " isPush - " + ret);        return ret;    }			public int getSyncInterval (Context context) {		boolean isPeak = SyncScheduler.getIsPeakAndNextAlarm(this).first;		// get roaming information		boolean isRoaming = Utility.isRoaming(context);				if (CommonDefs.ALWAYS_ROAMING)         	isRoaming = true;				if (isRoaming) {			int roamingSchedule = getRoamingSchedule();			if (roamingSchedule == AccountValues.SyncTime.CHECK_ROAMING_MANUAL) {                EmailLog.d(TAG, "isManualScheduledNow - Roaming and " +						" isPeak - " + isPeak + " and Manaul is set");				return AccountValues.SyncTime.CHECK_ROAMING_MANUAL;			} // fall-down to follow the "above-settings"		} 		return (isPeak) ? getPeakSchedule() : getOffPeakSchedule(); 	}		public String toString() {        return "\n  mStartMinute=" + mStartMinute + " mEndMinute=" + mEndMinute +                " mPeakDays=" + mPeakDays + " mPeakSchedule=" + mPeakSchedule +                 " mOffPeakSchedule=" + mOffPeakSchedule + " mRoamingSchedule="                + mRoamingSchedule + " mIsPeakScheduleOn="                + mIsPeakScheduleOn;    }		// SVL - end a.somani	}// change@wtl.jpshu SyncSchedule