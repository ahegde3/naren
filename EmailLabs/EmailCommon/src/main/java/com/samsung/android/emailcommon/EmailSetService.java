package com.samsung.android.emailcommon;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.database.Cursor;import android.os.Process;import com.samsung.android.emailcommon.provider.EmailContent;import com.samsung.android.emailcommon.utility.Log;import com.samsung.android.emailcommon.utility.Utility;public class EmailSetService {    /**     * Asynchronous version of {@link #setServicesEnabledSync(Context)}. Use     * when calling from UI thread (or lifecycle entry points.)     *     * @param context     */    public static void setServicesEnabledAsync(final Context context) {        Utility.runAsync(new Runnable() {            @Override            public void run() {                setServicesEnabledSync(context);            }        });    }    /**     * Called throughout the application when the number of accounts has     * changed. This method enables or disables the Compose activity, the boot     * receiver and the service based on whether any accounts are configured.     * Blocking call - do not call from UI/lifecycle threads.     *     * @param context     * @return true if there are any accounts configured.     */    public static boolean setServicesEnabledSync(Context context) {        Cursor c = null;        try {            c = context.getContentResolver().query(EmailContent.Account.CONTENT_URI,                    EmailContent.Account.ID_PROJECTION, null, null, null);            boolean enable = c.getCount() > 0;            setServicesEnabled(context, enable);            return enable;        } catch        // comment out ; check it (SQLiteDatabaseLockedException e)        (Exception e) {            e.printStackTrace();            return false;        } finally {            if (c != null) {                c.close();            }        }    }    // change@siso.kanchan, SSL handling in autodiscover.end    public static void setServicesEnabled(Context context, boolean enabled) {        try {            ComponentName cnMailService = new ComponentName(EmailPackage.PKG_PROVIDER, EmailPackage.MailService);            if (enabled) {                /*                 * If no accounts now exist but the service is still enabled we're                 * about to disable it so we'll reschedule to kill off any existing                 * alarms.                 */                Intent i = new Intent();                i.setComponent(cnMailService);                i.setAction(IntentConst.ACTION_RESCHEDULE);                context.startService(i);            }            ComponentName cnAttachmentService = new ComponentName(EmailPackage.PKG_PROVIDER, EmailPackage.AttachmentDownloadService);            // Start/stop the AttachmentDownloadService, depending on whether there            // are any accounts            Intent intent = new Intent();            intent.setComponent(cnAttachmentService);            if (enabled) {                context.startService(intent);            } else {                context.stopService(intent);            }            intent = new Intent();            intent.setComponent(new ComponentName(EmailPackage.PKG_PROVIDER, EmailPackage.EmailService));            if (enabled) {                context.startService(intent);            } else {                context.stopService(intent);            }            intent = new Intent();            intent.setComponent(new ComponentName(EmailPackage.PKG_PROVIDER, EmailPackage.ImapPushService));            if (EmailFeature.isIMAPPushEnabled()) {                if (enabled) {                    context.startService(intent);                } else {                    context.stopService(intent);                }            }            //MNO B2B End        } catch (Exception e) {            e.printStackTrace();        }    }    // adapter_porting    /**     * Called throughout the application when the number of accounts has     * changed. This method enables or disables the Compose activity, the boot     * receiver and the service based on whether any accounts are configured.     * Returns true if there are any accounts configured.     */    public static boolean setServicesEnabled(Context context) {        Cursor c = null;        try {            c = context.getContentResolver().query(EmailContent.Account.CONTENT_URI,                    EmailContent.Account.ID_PROJECTION, null, null, null);            final boolean enable = c.getCount() > 0;            Log.logv("Email >>", "setServicesEnables || " + enable);            /*             * add for improve update action into package manager, 100514             * fidelis.lee samsung             */            final Context con = context;            new Thread() {                public void run() {                    Log.logv("Email >>", "THREAD RUN BEFORE <<<<<<<<<<<<<<<<");                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);                    setServicesEnabled(con, enable);                    Log.logv("Email >>", "THREAD RUN AFTER >>>>>>>>>>>>>>>>>");                }            }.start();            // end of add            return enable;        } finally {            if (c != null) {                c.close();            }        }    }    public static void startEmailService(final Context context, Boolean enabled) {        Intent intent = new Intent();        intent.setComponent(new ComponentName(EmailPackage.PKG_BASE, EmailPackage.EmailService));        try {            if (enabled) {                if(context != null) {                    context.startService(intent);                }            } else {                if(context != null) {                    context.stopService(intent);                }            }        }catch(SecurityException e) {            e.printStackTrace();        }    }}